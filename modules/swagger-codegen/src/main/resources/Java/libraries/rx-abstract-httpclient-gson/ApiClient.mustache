{{>licenseInfo}}

package {{invokerPackage}};

import java.lang.reflect.Type;

import java.util.Collections;
import java.util.Map;
import java.util.HashMap;
import java.util.List;

import rx.Observable;

import java.io.IOException;

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.ApiRequest;
import {{invokerPackage}}.HttpClient;
import {{invokerPackage}}.HttpClientUtils;
import {{invokerPackage}}.JSONSerializer;

import {{invokerPackage}}.auth.Authentication;
import {{invokerPackage}}.auth.HttpBasicAuth;
import {{invokerPackage}}.auth.ApiKeyAuth;
import {{invokerPackage}}.auth.OAuth;

{{>generatedAnnotation}}
public class ApiClient {

    private String basePath = "{{{basePath}}}";
    private boolean lenientOnJson = false;
    private Map<String, String> defaultHeaderMap = new HashMap<String, String>();

    private Map<String, Authentication> authentications;

    private HttpClient httpClient;
    private JSONSerializer json;

    /*
     * Constructor for ApiClient
     */
    public ApiClient(HttpClient httpClientImpl) {
        // HTTP Client Dependency
        httpClient = httpClientImpl;

        // JSON Serialization/Deserialization
        json = new JSONSerializer(this);

        // Set default User-Agent.
        setUserAgent("{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{artifactVersion}}}/java{{/httpUserAgent}}");

        // Setup authentications (key: authentication name, value: authentication).
        authentications = new HashMap<String, Authentication>();{{#authMethods}}{{#isBasic}}
        authentications.put("{{name}}", new HttpBasicAuth());{{/isBasic}}{{#isApiKey}}
        authentications.put("{{name}}", new ApiKeyAuth({{#isKeyInHeader}}"header"{{/isKeyInHeader}}{{^isKeyInHeader}}"query"{{/isKeyInHeader}}, "{{keyParamName}}"));{{/isApiKey}}{{#isOAuth}}
        authentications.put("{{name}}", new OAuth());{{/isOAuth}}{{/authMethods}}
        // Prevent the authentications from being modified.
        authentications = Collections.unmodifiableMap(authentications);
    }

    /**
     * Get base path
     *
     * @return Base path
     */
    public String getBasePath() {
        return basePath;
    }

    /**
     * Set base path
     *
     * @param basePath Base path of the URL (e.g {{{basePath}}}
     * @return An instance of ApiClient
     */
    public ApiClient setBasePath(String basePath) {
        this.basePath = basePath;
        return this;
    }

    /**
     * Get HTTP client
     *
     * @return An instance of HttpClient
     */
    public HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Set HTTP client
     *
     * @param httpClient An instance of HttpClient
     * @return ApiClient
     */
    public ApiClient setHttpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /**
     * Get JSON Serializer
     *
     * @return JSON object
     */
    public JSONSerializer getJSON() {
        return json;
    }

    /**
     * Set JSON Serializer
     *
     * @param json JSON object
     * @return ApiClient client
     */
    public ApiClient setJSON(JSONSerializer json) {
        this.json = json;
        return this;
    }

	// TODO Swagger template language won't generate lowercase http method names, so we have to
	// use uppercase here for now. Fix this in the future.
    public Observable<ApiResponse> GET(String endpoint, ApiRequest request) {
        return httpClient.get(endpoint, request);
    }

    public Observable<ApiResponse> POST(String endpoint, ApiRequest request) {
        return httpClient.post(endpoint, request);
    }

    public Observable<ApiResponse> PUT(String endpoint, ApiRequest request) {
        return httpClient.put(endpoint, request);
    }

    public Observable<ApiResponse> DELETE(String endpoint, ApiRequest request) {
        return httpClient.delete(endpoint, request);
    }

    /**
     * Get authentications (key: authentication name, value: authentication).
     *
     * @return Map of authentication objects
     */
    public Map<String, Authentication> getAuthentications() {
        return authentications;
    }

    /**
     * Get authentication for the given name.
     *
     * @param authName The authentication name
     * @return The authentication, null if not found
     */
    public Authentication getAuthentication(String authName) {
        return authentications.get(authName);
    }

    /**
     * Helper method to set username for the first HTTP basic authentication.
     *
     * @param username Username
     */
    public void setUsername(String username) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof HttpBasicAuth) {
                ((HttpBasicAuth) auth).setUsername(username);
                return;
            }
        }
        throw new RuntimeException("No HTTP basic authentication configured!");
    }

    /**
     * Helper method to set password for the first HTTP basic authentication.
     *
     * @param password Password
     */
    public void setPassword(String password) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof HttpBasicAuth) {
                ((HttpBasicAuth) auth).setPassword(password);
                return;
            }
        }
        throw new RuntimeException("No HTTP basic authentication configured!");
    }

    /**
     * Helper method to set API key value for the first API key authentication.
     *
     * @param apiKey API key
     */
    public void setApiKey(String apiKey) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof ApiKeyAuth) {
                ((ApiKeyAuth) auth).setApiKey(apiKey);
                return;
            }
        }
        throw new RuntimeException("No API key authentication configured!");
    }

    /**
     * Helper method to set API key prefix for the first API key authentication.
     *
     * @param apiKeyPrefix API key prefix
     */
    public void setApiKeyPrefix(String apiKeyPrefix) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof ApiKeyAuth) {
                ((ApiKeyAuth) auth).setApiKeyPrefix(apiKeyPrefix);
                return;
            }
        }
        throw new RuntimeException("No API key authentication configured!");
    }

    /**
     * Helper method to set access token for the first OAuth2 authentication.
     *
     * @param accessToken Access token
     */
    public void setAccessToken(String accessToken) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof OAuth) {
                ((OAuth) auth).setAccessToken(accessToken);
                return;
            }
        }
        throw new RuntimeException("No OAuth2 authentication configured!");
    }

    /**
     * Set the User-Agent header's value (by adding to the default header map).
     *
     * @param userAgent HTTP request's user agent
     * @return ApiClient
     */
    public ApiClient setUserAgent(String userAgent) {
        addDefaultHeader("User-Agent", userAgent);
        return this;
    }

    /**
     * Add a default header.
     *
     * @param key The header's key
     * @param value The header's value
     * @return ApiClient
     */
    public ApiClient addDefaultHeader(String key, String value) {
        defaultHeaderMap.put(key, value);
        return this;
    }

    /**
     * @see <a href="https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)">setLenient</a>
     *
     * @return True if lenientOnJson is enabled, false otherwise.
     */
    public boolean isLenientOnJson() {
        return lenientOnJson;
    }

    /**
     * Set LenientOnJson
     *
     * @param lenient True to enable lenientOnJson
     * @return ApiClient
     */
    public ApiClient setLenientOnJson(boolean lenient) {
        this.lenientOnJson = lenient;
        return this;
    }

    /**
     * Deserialize response body to Java object, according to the return type and
     * the Content-Type response header.
     *
     * @param <T> Type
     * @param response HTTP response
     * @param returnType The type of the Java object
     * @return The deserialized Java object
     * @throws ApiException If fail to deserialize response body, i.e. cannot read response body
     *   or the Content-Type of the response is not supported.
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(ApiResponse response, Type returnType) throws ApiException {
        if (response == null || returnType == null) {
            return null;
        }

        String respBody;
        if (response.getData() != null) {
            respBody = response.getData().toString();
        } else {
            respBody = null;
        }

        if (respBody == null || "".equals(respBody)) {
            return null;
        }

        if (response.isJsonContentType()) {
            // De-Serialize to DTO
            return json.deserialize(respBody, returnType);
        } else if (returnType.equals(String.class)) {
            // Expecting string, return the raw response body.
            return (T) respBody;
        } else {
            throw new ApiException(
                    "De-Serializing Content type \"" + response.getContentType() + "\" is not supported for type: " + returnType,
                    response);
        }
    }

    /**
     * Serialize the given Java object into request body according to the object's
     * class and the request Content-Type.
     *
     * @param request The ApiRequest object
     * @return The serialized request body
     * @throws ApiException If fail to serialize the given object
     */
    public ApiRequest serialize(ApiRequest request) throws ApiException {
        // TODO This is a VERY naive implementation
        String content;
        if (request != null && request.getData() != null) {
            if (request.isJsonContentType()) {
                content = json.serialize(request.getData());
                request.setSerializedBody(content);
            } else {
            	// TODO Implement File Serialization of Binary Data, Forms, Multi-Part etc.
                request.setSerializedBody(request.getData().toString());
            }
        }
        return request;
    }

    /**
     * Do post-processing on Request to prep it for Http Call
     *
     * @param ApiRequest request
     * @param ApiRequest request
     */
    public ApiRequest prepareRequestForCall(ApiRequest request) throws ApiException {
        if (request != null) {
            request = request.addHeaders(defaultHeaderMap);
            request = authenticateRequest(request);
            request = serialize(request);
        }
        return request;
    }

    /**
     * Handle the given response, return the deserialized object when the response is successful.
     *
     * @param <T> Type
     * @param response ApiResponse
     * @param returnType Return type
     * @throws ApiException If the response has a unsuccessful status code or
     *   fail to deserialize the response body
     * @return Type
     */
    public <T> T handleResponse(ApiResponse response, Type returnType) throws ApiException {
        if (response.isSuccessful()) {
            if (returnType == null || response.getStatusCode() == 204) {
                // returning null if the returnType is not defined,
                // or the status code is 204 (No Content)
                return null;
            } else {
                return deserialize(response, returnType);
            }
        } else {
            throw new ApiException("Bypassed Post-Processing of Unsuccessful response.", response);
        }
    }

    /**
     * Build full URL by concatenating base path, the given sub path and query parameters.
     *
     * @param path The sub path
     * @param queryParams The query parameters
     * @return String The full URL
     */
    public String buildUrl(String path, List<Pair> queryParams) {
        return HttpClientUtils.buildUrl(basePath, path, queryParams);
    }

    /**
     * Set header parameters, to include default headers.
     *
     * @param ApiRequest request
     * @param ApiRequest request
     */
    public ApiRequest authenticateRequest(ApiRequest request) throws ApiException {
        request = request.addHeaders(defaultHeaderMap);
        String[] authTypes = request.getAuthTypes();
        if (authTypes != null) {
			for (String authType : request.getAuthTypes()) {
				Authentication auth = authentications.get(authType);
				if (auth == null) throw new RuntimeException("Authentication undefined: " + authType);
				auth.applyToRequest(request);
			}
        }
        return request;
    }
}

